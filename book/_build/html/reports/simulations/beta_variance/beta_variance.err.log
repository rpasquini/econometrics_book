Traceback (most recent call last):
  File "/home/rpasquini/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/rpasquini/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rpasquini/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/rpasquini/miniconda3/envs/econometrics_book/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/rpasquini/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/rpasquini/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/rpasquini/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import numpy as np
import statsmodels.api as sm
import plotly.express as px

# Initialize the Dash app
app = dash.Dash(__name__)

# Add MathJax to the Dash app
"""
app.index_string = '''
<!DOCTYPE html>
<html>
    <head>
        {%metas%}
        <title>{%title%}</title>
        {%favicon%}
        {%css%}
        <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
        <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    </head>
    <body>
        {%app_entry%}
        <footer>
            {%config%}
            {%scripts%}
            {%renderer%}
        </footer>
    </body>
</html>
'''

"""

app.layout = html.Div([

    dcc.Graph(id='histogram'),
    html.Label("Standard Deviation of X (\\(\\sigma_X\\))"),
    dcc.Slider(id='sigma_X', min=0.1, max=5, step=0.1, value=1),
    html.Label("Standard Deviation of Error Term (\\(\\sigma\\))"),
    dcc.Slider(id='sigma', min=0.1, max=5, step=0.1, value=1),
    html.Label("Sample size"),
    dcc.Slider(id='n', min=0, max=1000, step=50, value=100),
    html.Div(id='stats')
])

@app.callback(
    [Output('histogram', 'figure'),
     Output('stats', 'children')],
    [Input('sigma_X', 'value'),
     Input('sigma', 'value'),
     Input('n', 'value')]
)
def update_histogram(sigma_X, sigma, n):
    # Parameters
    np.random.seed(42)
    beta_0 = 2
    beta_1 = 3
    mu_X = 0  # mean of X
    num_simulations = 5000

    # Storage for beta_1 estimates
    beta_1_estimates = []

    for _ in range(num_simulations):
        # Generate random X and error term epsilon
        X = np.random.normal(mu_X, sigma_X, n)
        epsilon = np.random.normal(0, sigma, n)
        
        # Generate Y
        Y = beta_0 + beta_1 * X + epsilon
        
        # Perform linear regression
        X = sm.add_constant(X)  # Add intercept term
        model = sm.OLS(Y, X)
        results = model.fit()
        
        # Store the estimated beta_1
        beta_1_estimates.append(results.params[1])

    # Calculate mean and standard deviation of beta_1 estimates
    mean_beta_1 = np.mean(beta_1_estimates)
    std_beta_1 = np.std(beta_1_estimates)

    # Create the histogram
    fig = px.histogram(beta_1_estimates, nbins=30, title='Distribution of Estimated $\\beta_1$',
                       labels={'value': 'Estimated $\\beta_1$', 'count': 'Frequency'})

    # Create stats text
    stats_div = html.Div([
        html.H4("Statistics:"),
        html.P(f"Mean of $\\beta_1$: {mean_beta_1:.4f}"),
        html.P(f"Standard Deviation of $\\beta_1$: {std_beta_1:.4f}")
    ])
    
    return fig, stats_div

#if __name__ == '__main__':

app.run_server(mode='inline', debug=True)

------------------

----- stderr -----
Address already in use
Port 8050 is in use by another program. Either identify and stop that program, or start the server with a different port.
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mOSError[0m                                   Traceback (most recent call last)
File [0;32m~/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/werkzeug/serving.py:750[0m, in [0;36mBaseWSGIServer.__init__[0;34m(self, host, port, app, handler, passthrough_errors, ssl_context, fd)[0m
[1;32m    749[0m [38;5;28;01mtry[39;00m:
[0;32m--> 750[0m     [38;5;28mself[39m[38;5;241m.[39mserver_bind()
[1;32m    751[0m     [38;5;28mself[39m[38;5;241m.[39mserver_activate()

File [0;32m~/miniconda3/envs/econometrics_book/lib/python3.12/http/server.py:136[0m, in [0;36mHTTPServer.server_bind[0;34m(self)[0m
[1;32m    135[0m [38;5;250m[39m[38;5;124;03m"""Override server_bind to store the server name."""[39;00m
[0;32m--> 136[0m socketserver[38;5;241m.[39mTCPServer[38;5;241m.[39mserver_bind([38;5;28mself[39m)
[1;32m    137[0m host, port [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mserver_address[:[38;5;241m2[39m]

File [0;32m~/miniconda3/envs/econometrics_book/lib/python3.12/socketserver.py:473[0m, in [0;36mTCPServer.server_bind[0;34m(self)[0m
[1;32m    472[0m     [38;5;28mself[39m[38;5;241m.[39msocket[38;5;241m.[39msetsockopt(socket[38;5;241m.[39mSOL_SOCKET, socket[38;5;241m.[39mSO_REUSEPORT, [38;5;241m1[39m)
[0;32m--> 473[0m [38;5;28mself[39m[38;5;241m.[39msocket[38;5;241m.[39mbind([38;5;28mself[39m[38;5;241m.[39mserver_address)
[1;32m    474[0m [38;5;28mself[39m[38;5;241m.[39mserver_address [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39msocket[38;5;241m.[39mgetsockname()

[0;31mOSError[0m: [Errno 98] Address already in use

During handling of the above exception, another exception occurred:

[0;31mSystemExit[0m                                Traceback (most recent call last)
    [0;31m[... skipping hidden 1 frame][0m

Cell [0;32mIn[1], line 102[0m
[1;32m    100[0m [38;5;66;03m#if __name__ == '__main__':[39;00m
[0;32m--> 102[0m app[38;5;241m.[39mrun_server(mode[38;5;241m=[39m[38;5;124m'[39m[38;5;124minline[39m[38;5;124m'[39m, debug[38;5;241m=[39m[38;5;28;01mTrue[39;00m)

File [0;32m~/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/dash/dash.py:2277[0m, in [0;36mDash.run_server[0;34m(self, *args, **kwargs)[0m
[1;32m   2272[0m [38;5;250m[39m[38;5;124;03m"""`run_server` is a deprecated alias of `run` and may be removed in a[39;00m
[1;32m   2273[0m [38;5;124;03mfuture version. We recommend using `app.run` instead.[39;00m
[1;32m   2274[0m 
[1;32m   2275[0m [38;5;124;03mSee `app.run` for usage information.[39;00m
[1;32m   2276[0m [38;5;124;03m"""[39;00m
[0;32m-> 2277[0m [38;5;28mself[39m[38;5;241m.[39mrun([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)

File [0;32m~/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/dash/dash.py:2168[0m, in [0;36mDash.run[0;34m(self, host, port, proxy, debug, jupyter_mode, jupyter_width, jupyter_height, jupyter_server_url, dev_tools_ui, dev_tools_props_check, dev_tools_serve_dev_bundles, dev_tools_hot_reload, dev_tools_hot_reload_interval, dev_tools_hot_reload_watch_interval, dev_tools_hot_reload_max_retry, dev_tools_silence_routes_logging, dev_tools_prune_errors, **flask_run_options)[0m
[1;32m   2167[0m [38;5;28;01mif[39;00m jupyter_dash[38;5;241m.[39mactive:
[0;32m-> 2168[0m     jupyter_dash[38;5;241m.[39mrun_app(
[1;32m   2169[0m         [38;5;28mself[39m,
[1;32m   2170[0m         mode[38;5;241m=[39mjupyter_mode,
[1;32m   2171[0m         width[38;5;241m=[39mjupyter_width,
[1;32m   2172[0m         height[38;5;241m=[39mjupyter_height,
[1;32m   2173[0m         host[38;5;241m=[39mhost,
[1;32m   2174[0m         port[38;5;241m=[39mport,
[1;32m   2175[0m         server_url[38;5;241m=[39mjupyter_server_url,
[1;32m   2176[0m     )
[1;32m   2177[0m [38;5;28;01melse[39;00m:

File [0;32m~/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/dash/_jupyter.py:332[0m, in [0;36mJupyterDash.run_app[0;34m(self, app, mode, width, height, host, port, server_url)[0m
[1;32m    330[0m err_q [38;5;241m=[39m queue[38;5;241m.[39mQueue()
[0;32m--> 332[0m server [38;5;241m=[39m make_server(host, port, app[38;5;241m.[39mserver, threaded[38;5;241m=[39m[38;5;28;01mTrue[39;00m, processes[38;5;241m=[39m[38;5;241m0[39m)
[1;32m    333[0m logging[38;5;241m.[39mgetLogger([38;5;124m"[39m[38;5;124mwerkzeug[39m[38;5;124m"[39m)[38;5;241m.[39msetLevel(logging[38;5;241m.[39mERROR)

File [0;32m~/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/werkzeug/serving.py:921[0m, in [0;36mmake_server[0;34m(host, port, app, threaded, processes, request_handler, passthrough_errors, ssl_context, fd)[0m
[1;32m    920[0m [38;5;28;01mif[39;00m threaded:
[0;32m--> 921[0m     [38;5;28;01mreturn[39;00m ThreadedWSGIServer(
[1;32m    922[0m         host, port, app, request_handler, passthrough_errors, ssl_context, fd[38;5;241m=[39mfd
[1;32m    923[0m     )
[1;32m    925[0m [38;5;28;01mif[39;00m processes [38;5;241m>[39m [38;5;241m1[39m:

File [0;32m~/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/werkzeug/serving.py:773[0m, in [0;36mBaseWSGIServer.__init__[0;34m(self, host, port, app, handler, passthrough_errors, ssl_context, fd)[0m
[1;32m    767[0m             [38;5;28mprint[39m(
[1;32m    768[0m                 [38;5;124m"[39m[38;5;124mOn macOS, try disabling the [39m[38;5;124m'[39m[38;5;124mAirPlay Receiver[39m[38;5;124m'[39m[38;5;124m service[39m[38;5;124m"[39m
[1;32m    769[0m                 [38;5;124m"[39m[38;5;124m from System Preferences -> General -> AirDrop & Handoff.[39m[38;5;124m"[39m,
[1;32m    770[0m                 file[38;5;241m=[39msys[38;5;241m.[39mstderr,
[1;32m    771[0m             )
[0;32m--> 773[0m     sys[38;5;241m.[39mexit([38;5;241m1[39m)
[1;32m    774[0m [38;5;28;01mexcept[39;00m [38;5;167;01mBaseException[39;00m:

[0;31mSystemExit[0m: 1

During handling of the above exception, another exception occurred:

[0;31mAttributeError[0m                            Traceback (most recent call last)
    [0;31m[... skipping hidden 1 frame][0m

File [0;32m~/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/IPython/core/interactiveshell.py:2145[0m, in [0;36mInteractiveShell.showtraceback[0;34m(self, exc_tuple, filename, tb_offset, exception_only, running_compiled_code)[0m
[1;32m   2142[0m [38;5;28;01mif[39;00m exception_only:
[1;32m   2143[0m     stb [38;5;241m=[39m [[38;5;124m'[39m[38;5;124mAn exception has occurred, use [39m[38;5;124m%[39m[38;5;124mtb to see [39m[38;5;124m'[39m
[1;32m   2144[0m            [38;5;124m'[39m[38;5;124mthe full traceback.[39m[38;5;130;01m\n[39;00m[38;5;124m'[39m]
[0;32m-> 2145[0m     stb[38;5;241m.[39mextend([38;5;28mself[39m[38;5;241m.[39mInteractiveTB[38;5;241m.[39mget_exception_only(etype,
[1;32m   2146[0m                                                      value))
[1;32m   2147[0m [38;5;28;01melse[39;00m:
[1;32m   2149[0m     [38;5;28;01mdef[39;00m [38;5;21mcontains_exceptiongroup[39m(val):

File [0;32m~/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/IPython/core/ultratb.py:710[0m, in [0;36mListTB.get_exception_only[0;34m(self, etype, value)[0m
[1;32m    702[0m [38;5;28;01mdef[39;00m [38;5;21mget_exception_only[39m([38;5;28mself[39m, etype, value):
[1;32m    703[0m [38;5;250m    [39m[38;5;124;03m"""Only print the exception type and message, without a traceback.[39;00m
[1;32m    704[0m 
[1;32m    705[0m [38;5;124;03m    Parameters[39;00m
[0;32m   (...)[0m
[1;32m    708[0m [38;5;124;03m    value : exception value[39;00m
[1;32m    709[0m [38;5;124;03m    """[39;00m
[0;32m--> 710[0m     [38;5;28;01mreturn[39;00m ListTB[38;5;241m.[39mstructured_traceback([38;5;28mself[39m, etype, value)

File [0;32m~/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/IPython/core/ultratb.py:568[0m, in [0;36mListTB.structured_traceback[0;34m(self, etype, evalue, etb, tb_offset, context)[0m
[1;32m    565[0m     chained_exc_ids[38;5;241m.[39madd([38;5;28mid[39m(exception[[38;5;241m1[39m]))
[1;32m    566[0m     chained_exceptions_tb_offset [38;5;241m=[39m [38;5;241m0[39m
[1;32m    567[0m     out_list [38;5;241m=[39m (
[0;32m--> 568[0m         [38;5;28mself[39m[38;5;241m.[39mstructured_traceback(
[1;32m    569[0m             etype,
[1;32m    570[0m             evalue,
[1;32m    571[0m             (etb, chained_exc_ids),  [38;5;66;03m# type: ignore[39;00m
[1;32m    572[0m             chained_exceptions_tb_offset,
[1;32m    573[0m             context,
[1;32m    574[0m         )
[1;32m    575[0m         [38;5;241m+[39m chained_exception_message
[1;32m    576[0m         [38;5;241m+[39m out_list)
[1;32m    578[0m [38;5;28;01mreturn[39;00m out_list

File [0;32m~/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/IPython/core/ultratb.py:1454[0m, in [0;36mAutoFormattedTB.structured_traceback[0;34m(self, etype, evalue, etb, tb_offset, number_of_lines_of_context)[0m
[1;32m   1452[0m [38;5;28;01melse[39;00m:
[1;32m   1453[0m     [38;5;28mself[39m[38;5;241m.[39mtb [38;5;241m=[39m etb
[0;32m-> 1454[0m [38;5;28;01mreturn[39;00m FormattedTB[38;5;241m.[39mstructured_traceback(
[1;32m   1455[0m     [38;5;28mself[39m, etype, evalue, etb, tb_offset, number_of_lines_of_context
[1;32m   1456[0m )

File [0;32m~/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/IPython/core/ultratb.py:1345[0m, in [0;36mFormattedTB.structured_traceback[0;34m(self, etype, value, tb, tb_offset, number_of_lines_of_context)[0m
[1;32m   1342[0m mode [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mmode
[1;32m   1343[0m [38;5;28;01mif[39;00m mode [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mverbose_modes:
[1;32m   1344[0m     [38;5;66;03m# Verbose modes need a full traceback[39;00m
[0;32m-> 1345[0m     [38;5;28;01mreturn[39;00m VerboseTB[38;5;241m.[39mstructured_traceback(
[1;32m   1346[0m         [38;5;28mself[39m, etype, value, tb, tb_offset, number_of_lines_of_context
[1;32m   1347[0m     )
[1;32m   1348[0m [38;5;28;01melif[39;00m mode [38;5;241m==[39m [38;5;124m'[39m[38;5;124mMinimal[39m[38;5;124m'[39m:
[1;32m   1349[0m     [38;5;28;01mreturn[39;00m ListTB[38;5;241m.[39mget_exception_only([38;5;28mself[39m, etype, value)

File [0;32m~/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/IPython/core/ultratb.py:1192[0m, in [0;36mVerboseTB.structured_traceback[0;34m(self, etype, evalue, etb, tb_offset, number_of_lines_of_context)[0m
[1;32m   1183[0m [38;5;28;01mdef[39;00m [38;5;21mstructured_traceback[39m(
[1;32m   1184[0m     [38;5;28mself[39m,
[1;32m   1185[0m     etype: [38;5;28mtype[39m,
[0;32m   (...)[0m
[1;32m   1189[0m     number_of_lines_of_context: [38;5;28mint[39m [38;5;241m=[39m [38;5;241m5[39m,
[1;32m   1190[0m ):
[1;32m   1191[0m [38;5;250m    [39m[38;5;124;03m"""Return a nice text document describing the traceback."""[39;00m
[0;32m-> 1192[0m     formatted_exception [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mformat_exception_as_a_whole(etype, evalue, etb, number_of_lines_of_context,
[1;32m   1193[0m                                                            tb_offset)
[1;32m   1195[0m     colors [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mColors  [38;5;66;03m# just a shorthand + quicker name lookup[39;00m
[1;32m   1196[0m     colorsnormal [38;5;241m=[39m colors[38;5;241m.[39mNormal  [38;5;66;03m# used a lot[39;00m

File [0;32m~/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/IPython/core/ultratb.py:1082[0m, in [0;36mVerboseTB.format_exception_as_a_whole[0;34m(self, etype, evalue, etb, number_of_lines_of_context, tb_offset)[0m
[1;32m   1079[0m [38;5;28;01massert[39;00m [38;5;28misinstance[39m(tb_offset, [38;5;28mint[39m)
[1;32m   1080[0m head [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mprepare_header([38;5;28mstr[39m(etype), [38;5;28mself[39m[38;5;241m.[39mlong_header)
[1;32m   1081[0m records [38;5;241m=[39m (
[0;32m-> 1082[0m     [38;5;28mself[39m[38;5;241m.[39mget_records(etb, number_of_lines_of_context, tb_offset) [38;5;28;01mif[39;00m etb [38;5;28;01melse[39;00m []
[1;32m   1083[0m )
[1;32m   1085[0m frames [38;5;241m=[39m []
[1;32m   1086[0m skipped [38;5;241m=[39m [38;5;241m0[39m

File [0;32m~/miniconda3/envs/econometrics_book/lib/python3.12/site-packages/IPython/core/ultratb.py:1150[0m, in [0;36mVerboseTB.get_records[0;34m(self, etb, number_of_lines_of_context, tb_offset)[0m
[1;32m   1148[0m [38;5;28;01mwhile[39;00m cf [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m   1149[0m     [38;5;28;01mtry[39;00m:
[0;32m-> 1150[0m         mod [38;5;241m=[39m inspect[38;5;241m.[39mgetmodule(cf[38;5;241m.[39mtb_frame)
[1;32m   1151[0m         [38;5;28;01mif[39;00m mod [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m   1152[0m             mod_name [38;5;241m=[39m mod[38;5;241m.[39m[38;5;18m__name__[39m

[0;31mAttributeError[0m: 'tuple' object has no attribute 'tb_frame'

